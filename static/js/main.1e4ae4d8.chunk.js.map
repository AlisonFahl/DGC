{"version":3,"sources":["components/Comment/Comment.js","components/Form/Form.js","utils/web3/web3.js","contracts/Chat.js","services/ChatService/ChatService.js","services/BaseService/BaseService.js","components/Toast/Toast.js","components/Toast/ErrorToast/ErrorToast.js","components/Toast/InfoToast/InfoToast.js","components/Toast/SuccessToast/SuccessToast.js","components/Notification/Notification.js","context/AppContext.js","components/Chat/Chat.js","components/App/App.js","index.js"],"names":["Comment","dateFormat","Intl","DateTimeFormat","year","month","day","hour","minute","second","Row","Col","sm","md","lg","style","textAlign","title","this","props","address","size","string","alias","className","format","date","text","React","Component","Form","ALIAS_CHAR_LIMIT","MESSAGE_CHAR_LIMIT","handleSubmit","event","isFormValid","postComment","state","message","preventDefault","getCharsLeft","wrapper","createRef","s","limit","length","Tooltip","id","onSubmit","Group","controlId","Label","Control","onChange","e","setState","target","value","isInvalid","type","placeholder","Text","toString","as","canSubmit","Button","variant","OverlayTrigger","overlay","ref","disabled","pointerEvents","window","ethereum","setupWithDefaultProvider","web3","currentProvider","Web3","providers","HttpProvider","process","provider","eth","Contract","ChatService","Promise","resolve","reject","getAccount","then","account","contract","methods","post","send","from","catch","getTotalMessages","call","index","messages","enable","getAccounts","accounts","Toast","bgColor","textColor","delay","onClose","autohide","Header","Body","children","ErrorToast","InfoToast","SuccessToast","Notification","position","top","right","notifications","map","notification","key","onHideNotification","Error","AppContext","createContext","AppContextProvider","onShowNotification","push","notificationCount","filter","x","contextValue","error","info","success","Provider","Chat","comment","context","Spinner","animation","marginLeft","service","postMessage","fetchNewComments","loadComment","getMessage","msg","comments","some","senderAlias","Date","parseInt","timestamp","sender","sort","a","b","total","i","fetchNewCommentsTaskId","setInterval","clearInterval","CardColumns","Card","border","contextType","App","Navbar","bg","Brand","Container","fluid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gmBAkCeA,E,uKA1BP,IAAMC,EAAa,IAAIC,KAAKC,eAAe,UAAW,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,UAAWC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,YACpJ,OACI,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GACpB,yBAAKC,MAAO,CAAEC,UAAW,UAAYC,MAAOC,KAAKC,MAAMC,SACnD,kBAAC,IAAD,CAAWC,KAAK,KAAKC,OAAQJ,KAAKC,MAAMC,YAGhD,kBAACT,EAAA,EAAD,KACI,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IAAI,4BAAI,gCAASM,KAAKC,MAAMI,SACrC,kBAACZ,EAAA,EAAD,CAAKC,GAAI,IAAI,2BAAOY,UAAU,cAAcvB,EAAWwB,OAAOP,KAAKC,MAAMO,WAIrF,kBAAChB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,2BAAIO,KAAKC,MAAMQ,a,GApBjBC,IAAMC,W,4CCCPC,E,kDAIjB,aAAe,IAAD,8BACV,gBAJJC,iBAAmB,GAGL,EAFdC,mBAAqB,IAEP,EAWdC,aAAe,SAACC,GACR,EAAKC,eACL,EAAKhB,MAAMiB,YAAY,CACnBb,MAAO,EAAKc,MAAMd,MAClBe,QAAS,EAAKD,MAAMC,UAI5BJ,EAAMK,kBAnBI,EAsBdJ,YAAc,WACV,OAAO,EAAKK,aAAa,EAAKH,MAAMd,MAAO,EAAKQ,mBAAqB,GAAK,EAAKS,aAAa,EAAKH,MAAMC,QAAS,EAAKN,qBAAuB,GApB5I,EAAKK,MAAQ,CACTd,MAAO,GACPe,QAAS,IAGb,EAAKG,QAAUb,IAAMc,YARX,E,yDA0BDC,EAAGC,GACZ,OAAQA,EAAQD,EAAEE,S,oCAGR1B,GACd,OACI,kBAAC2B,EAAA,EAAD,eAASC,GAAG,kBAAqB5B,GAAjC,oB,+BAMM,IAAD,OACL,OACI,kBAAC,IAAD,CAAQ6B,SAAU9B,KAAKe,cACnB,kBAAC,IAAOgB,MAAR,CAAcC,UAAU,aACpB,kBAAC,IAAOC,MAAR,eACA,kBAAC,IAAOC,QAAR,CAAgBC,SAAU,SAACC,GAAQ,EAAKC,SAAS,CAAEhC,MAAO+B,EAAEE,OAAOC,SAAYC,UAAWxC,KAAKsB,aAAatB,KAAKmB,MAAMd,MAAOL,KAAKa,kBAAoB,EAAG4B,KAAK,OAAOC,YAAY,6DAClL,kBAAC,IAAOC,KAAR,CAAarC,UAAU,cAClBN,KAAKsB,aAAatB,KAAKmB,MAAMd,MAAOL,KAAKa,kBAAkB+B,WADhE,gBAIJ,kBAAC,IAAOb,MAAR,CAAcC,UAAU,eACpB,kBAAC,IAAOC,MAAR,iBACA,kBAAC,IAAOC,QAAR,CAAgBC,SAAU,SAACC,GAAQ,EAAKC,SAAS,CAAEjB,QAASgB,EAAEE,OAAOC,SAAYC,UAAWxC,KAAKsB,aAAatB,KAAKmB,MAAMC,QAASpB,KAAKc,oBAAsB,EAAG+B,GAAG,WAAWH,YAAY,oBAC1L,kBAAC,IAAOC,KAAR,CAAarC,UAAU,cAClBN,KAAKsB,aAAatB,KAAKmB,MAAMC,QAASpB,KAAKc,oBAAoB8B,WADpE,gBAIH5C,KAAKC,MAAM6C,UACR,kBAACC,EAAA,EAAD,CAAQC,QAAQ,OAAOP,KAAK,UAA5B,UACA,kBAACQ,EAAA,EAAD,CAAgBC,QAAS,kBAACtB,EAAA,EAAD,CAASC,GAAG,oBAAZ,yDACrB,0BAAMsB,IAAKnD,KAAKuB,QAASjB,UAAU,kBAC/B,kBAACyC,EAAA,EAAD,CAAQC,QAAQ,eAAeP,KAAK,SAASW,UAAQ,EAACvD,MAAO,CAAEwD,cAAe,SAA9E,iB,GA/DM3C,IAAMC,W,iBCLzB,EAEP2C,OAAOC,SACAC,EAAyBF,OAAOC,UAGlCD,OAAOG,KACLD,EAAyBF,OAAOG,KAAKC,iBAazC,IAAIC,IAAK,IAAIA,IAAKC,UAAUC,aAAaC,kEALpD,SAASN,EAAyBO,GAC9B,OAAO,IAAIJ,IAAKI,GChBpB,IAIe,MAAIN,EAAKO,IAAIC,SAFhB,CAAC,CAAE,UAAY,EAAO,OAAU,CAAC,CAAE,KAAQ,UAAW,KAAQ,UAAY,CAAE,KAAQ,SAAU,KAAQ,WAAa,KAAQ,OAAQ,QAAW,GAAI,SAAW,EAAO,gBAAmB,aAAc,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,CAAC,CAAE,KAAQ,GAAI,KAAQ,YAAc,KAAQ,WAAY,QAAW,CAAC,CAAE,KAAQ,UAAW,KAAQ,UAAY,CAAE,KAAQ,SAAU,KAAQ,WAAa,CAAE,KAAQ,cAAe,KAAQ,UAAY,CAAE,KAAQ,YAAa,KAAQ,YAAc,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,UAAY,EAAM,OAAU,GAAI,KAAQ,mBAAoB,QAAW,CAAC,CAAE,KAAQ,GAAI,KAAQ,YAAc,SAAW,EAAO,gBAAmB,OAAQ,KAAQ,aAF5sBH,8CCCKI,E,0KACL9C,EAASf,GAAQ,IAAD,OACxB,OAAO,IAAI8D,SAAQ,SAACC,EAASC,GACzB,EAAKC,aACAC,MAAK,SAACC,GACHC,EAASC,QACJC,KAAKvD,EAASf,GACduE,KAAK,CACFC,KAAML,IAETD,KAAKH,GACLU,MAAMT,MAEdS,MAAMT,Q,yCAKf,OAAOI,EAASC,QACXK,mBACAC,S,iCAGEC,GACP,OAAOR,EAASC,QACXQ,SAASD,GACTD,W,wGCzBL,OAAO,IAAIb,SAAQ,SAACC,EAASC,GACrBf,OAAOC,SACPD,OAAOC,SAAS4B,SACXZ,MAAK,WACFd,EAAKO,IAAIoB,cACJb,MAAK,SAACc,GAAD,OAAcjB,EAAQiB,EAAS,OACpCP,MAAMT,MAEdS,MAAMT,GAGXZ,EAAKO,IAAIoB,cACJb,MAAK,SAACc,GAAD,OAAcjB,EAAQiB,EAAS,OACpCP,MAAMT,U,qCCbNiB,E,uKAEb,OACI,kBAAC,IAAD,CAAShF,UAAS,UAAKN,KAAKC,MAAMsF,QAAhB,YAA2BvF,KAAKC,MAAMuF,WAAaC,MAAOzF,KAAKC,MAAMwF,MAAOC,QAAS1F,KAAKC,MAAMyF,QAASC,SAAU3F,KAAKC,MAAM0F,UAC5I,kBAAC,IAAQC,OAAT,CAAgBtF,UAAU,sBACtB,4BAAQA,UAAU,WAAWN,KAAKC,MAAMF,QAE5C,kBAAC,IAAQ8F,KAAT,KAAe7F,KAAKC,MAAM6F,e,GAPPpF,IAAMC,WCApBoF,E,uKAEb,OACI,kBAAC,EAAD,CAAOhG,MAAM,QAAQwF,QAAQ,YAAYC,UAAU,aAAaC,MAAOzF,KAAKC,MAAMwF,MAAOC,QAAS1F,KAAKC,MAAMyF,QAASC,SAAU3F,KAAKC,MAAM0F,UACvI,6BAAM3F,KAAKC,MAAMmB,c,GAJOV,IAAMC,WCAzBqF,G,8KAEb,OACI,kBAAC,EAAD,CAAOjG,MAAM,OAAOwF,QAAQ,UAAUC,UAAU,aAAaC,MAAOzF,KAAKC,MAAMwF,MAAOC,QAAS1F,KAAKC,MAAMyF,QAASC,SAAU3F,KAAKC,MAAM0F,UACpI,6BAAM3F,KAAKC,MAAMmB,c,GAJMV,IAAMC,YCAxBsF,G,8KAEb,OACI,kBAAC,EAAD,CAAOlG,MAAM,UAAUwF,QAAQ,aAAaC,UAAU,aAAaC,MAAOzF,KAAKC,MAAMwF,MAAOC,QAAS1F,KAAKC,MAAMyF,QAASC,SAAU3F,KAAKC,MAAM0F,UAC1I,6BAAM3F,KAAKC,MAAMmB,c,GAJSV,IAAMC,YCE3BuF,E,uKACP,IAAD,OAsBL,OACI,yBAAKrG,MAAO,CAAEsG,SAAU,QAASC,IAAK,GAAIC,MAAO,IAC5CrG,KAAKC,MAAMqG,cAAcC,KAvBN,SAACC,GACzB,IAAMvG,EAAQ,CACVwG,IAAKD,EAAaC,IAClBrF,QAASoF,EAAapF,QACtBqE,MAAOe,EAAaf,MACpBE,SAAUa,EAAaf,MAAQ,EAC/BC,QAAS,kBAAM,EAAKzF,MAAMyG,mBAAmBF,EAAaC,OAG9D,OAAQD,EAAa/D,MACjB,IAAK,QACD,OAAO,kBAAC,EAAexC,GAC3B,IAAK,OACD,OAAO,kBAAC,EAAcA,GAC1B,IAAK,UACD,OAAO,kBAAC,EAAiBA,GAC7B,QACI,MAAM,IAAI0G,MAAM,sC,GAnBMjG,IAAMC,WCH1CiG,EAAalG,IAAMmG,gBAEZC,EAAb,kDACI,aAAe,IAAD,8BACV,gBASJC,mBAAqB,SAACtE,EAAMrB,EAASqE,GACjC,EAAKtE,MAAMmF,cAAcU,KAAK,CAAEP,MAAO,EAAKQ,kBAAmBxE,OAAMrB,UAASqE,UAC9E,EAAKpD,SAAS,CACViE,cAAe,EAAKnF,MAAMmF,iBAbpB,EAiBdI,mBAAqB,SAACD,GAClB,EAAKpE,SAAS,CACViE,cAAe,EAAKnF,MAAMmF,cAAcY,QAAO,SAAAC,GAAC,OAAIA,EAAEV,MAAQA,QAhBlE,EAAKtF,MAAQ,CACTmF,cAAe,IAGnB,EAAKW,kBAAoB,EAPf,EADlB,qDAwBc,IAAD,OACCG,EAAe,CACjBZ,aAAc,CACVa,MAAO,SAACjG,EAASqE,GAAY,EAAKsB,mBAAmB,QAAS3F,EAASqE,IACvE6B,KAAM,SAAClG,EAASqE,GAAY,EAAKsB,mBAAmB,OAAQ3F,EAASqE,IACrE8B,QAAS,SAACnG,EAASqE,GAAY,EAAKsB,mBAAmB,UAAW3F,EAASqE,MAInF,OACI,kBAACmB,EAAWY,SAAZ,CAAqBjF,MAAO6E,GACvBpH,KAAKC,MAAM6F,SACZ,kBAAC,EAAD,CAAcQ,cAAetG,KAAKmB,MAAMmF,cAAeI,mBAAoB1G,KAAK0G,0BApChG,GAAwChG,IAAMC,WA0C/BiG,I,0BCrCTa,E,kDACF,aAAe,IAAD,8BACV,gBAUJvG,YAAc,SAACwG,GACX,EAAKC,QAAQnB,aAAac,KACtB,6BAAK,kBAACM,EAAA,EAAD,CAASzH,KAAK,KAAK0H,UAAU,SAAS7E,QAAQ,SAAS,0BAAMnD,MAAO,CAAEiI,WAAY,SAA3B,2BAC1D,KAEN,EAAKC,QAAQC,YAAYN,EAAQtG,QAASsG,EAAQrH,OAC7CkE,MAAK,WACF,EAAKoD,QAAQnB,aAAae,QAAQ,+BAAgC,KAClE,EAAKU,sBAERnD,OAAM,WACH,EAAK6C,QAAQnB,aAAaa,MAAM,4BAA6B,SAtB3D,EA0Bda,YAAc,SAACrG,GACX,EAAKkG,QAAQI,WAAWtG,GACnB0C,MAAK,SAAC6D,GACH,EAAK/F,UAAS,SAAClB,EAAOlB,GAClB,OAAIkB,EAAMkH,SAASC,MAAK,SAACnB,GAAD,OAAOA,EAAEtF,KAAOA,KAC7B,GASJ,CACHwG,SARW,CAAC,CACZxG,GAAIA,EACJxB,MAAO+H,EAAIG,YACX9H,KAAM2H,EAAIhH,QACVZ,KAAM,IAAIgI,KAAK,IAAOC,SAASL,EAAIM,YACnCxI,QAASkI,EAAIO,SALF,mBAMTxH,EAAMkH,WAAUO,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEjH,GAAKgH,EAAEhH,cAvChD,EA+CdoG,iBAAmB,WACf,EAAKF,QAAQhD,mBACRR,MAAK,SAACwE,GACHA,EAAQN,SAASM,GACjB,IAFa,eAEJC,GACA,EAAK7H,MAAMkH,SAASC,MAAK,SAACnB,GAAD,OAAOA,EAAEtF,KAAOmH,MAC1C,EAAKd,YAAYc,IAFhBA,EAAI,EAAGA,EAAID,EAAOC,IAAM,EAAxBA,OAhDjB,EAAK7H,MAAQ,CACTkH,SAAU,GACVvF,WAAW,GAGf,EAAKiF,QAAU,IAAI7D,EART,E,gEA8DVlE,KAAKqC,SAAS,CACVS,UAAWQ,OAAOC,UAAYD,OAAOG,OAGzCzD,KAAKiJ,uBAAyB3F,OAAO4F,YAAYlJ,KAAKiI,iBAAkB,KACxEjI,KAAKiI,qB,6CAIL3E,OAAO6F,cAAcnJ,KAAKiJ,0B,+BAK1B,OACI,oCACI,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,OAAO,QAAShJ,UAAU,QAC5B,kBAAC+I,EAAA,EAAKxD,KAAN,KACI,kBAAC,EAAD,CAAM3E,YAAalB,KAAKkB,YAAa4B,UAAW9C,KAAKmB,MAAM2B,cAI/D9C,KAAKmB,MAAMkH,SAAS1G,OAAS,GAAK3B,KAAKmB,MAAMkH,SAAS9B,KAAI,SAACY,GAAD,OACtD,kBAACkC,EAAA,EAAD,CAAM5C,IAAKU,EAAEtF,GAAIyH,OAAO,QAAQhJ,UAAU,QACtC,kBAAC+I,EAAA,EAAKxD,KAAN,KACI,kBAAC,EAAYsB,c,GAzF9BzG,IAAMC,WAoGzB8G,EAAK8B,YAAc3C,EAEJa,QCnFA+B,MApBf,WACE,OACI,oCACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAO1G,QAAQ,QACtB,kBAACyG,EAAA,EAAOE,MAAR,mCAGJ,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,KACI,kBAACrK,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,Y,OCf1BqK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEAC,SAASC,eAAe,W","file":"static/js/main.1e4ae4d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Comment.css';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Identicon from 'react-identicons';\r\n\r\nclass Comment extends React.Component {\r\n    render() {\r\n        const dateFormat = new Intl.DateTimeFormat('default', { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', });\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col sm={12} md={3} lg={2}>\r\n                        <div style={{ textAlign: \"center\" }} title={this.props.address}>\r\n                            <Identicon size=\"42\" string={this.props.address} />\r\n                        </div>\r\n                    </Col>\r\n                    <Col>\r\n                        <Row>\r\n                            <Col sm={12}><h6><strong>{this.props.alias}</strong></h6></Col>\r\n                            <Col sm={12}><small className=\"text-muted\">{dateFormat.format(this.props.date)}</small></Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <p>{this.props.text}</p>\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Comment;\r\n","import React from 'react';\r\nimport './Form.css';\r\nimport BSForm from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\nexport default class Form extends React.Component {\r\n    ALIAS_CHAR_LIMIT = 30;\r\n    MESSAGE_CHAR_LIMIT = 280;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            alias: \"\",\r\n            message: \"\",\r\n        };\r\n\r\n        this.wrapper = React.createRef();\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        if (this.isFormValid()) {\r\n            this.props.postComment({\r\n                alias: this.state.alias,\r\n                message: this.state.message,\r\n            });\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    isFormValid = () => {\r\n        return this.getCharsLeft(this.state.alias, this.ALIAS_CHAR_LIMIT) >= 0 && this.getCharsLeft(this.state.message, this.MESSAGE_CHAR_LIMIT) >= 0;\r\n    }\r\n\r\n    getCharsLeft(s, limit) {\r\n        return (limit - s.length);\r\n    }\r\n\r\n    renderTooltip(props) {\r\n    return (\r\n        <Tooltip id=\"button-tooltip\" {...props}>\r\n            Simple tooltip\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <BSForm onSubmit={this.handleSubmit}>\r\n                <BSForm.Group controlId=\"formAlias\">\r\n                    <BSForm.Label>Alias:</BSForm.Label>\r\n                    <BSForm.Control onChange={(e) => { this.setState({ alias: e.target.value }) }} isInvalid={this.getCharsLeft(this.state.alias, this.ALIAS_CHAR_LIMIT) < 0} type=\"text\" placeholder=\"Choose an alias (leave it empty for posting anonymously)\" />\r\n                    <BSForm.Text className=\"text-muted\">\r\n                        {this.getCharsLeft(this.state.alias, this.ALIAS_CHAR_LIMIT).toString()} chars left\r\n                    </BSForm.Text>\r\n                </BSForm.Group>\r\n                <BSForm.Group controlId=\"formMessage\">\r\n                    <BSForm.Label>Message:</BSForm.Label>\r\n                    <BSForm.Control onChange={(e) => { this.setState({ message: e.target.value }) }} isInvalid={this.getCharsLeft(this.state.message, this.MESSAGE_CHAR_LIMIT) < 0} as=\"textarea\" placeholder=\"Type Message...\" />\r\n                    <BSForm.Text className=\"text-muted\">\r\n                        {this.getCharsLeft(this.state.message, this.MESSAGE_CHAR_LIMIT).toString()} chars left\r\n                    </BSForm.Text>\r\n                </BSForm.Group>\r\n                {this.props.canSubmit ?\r\n                    <Button variant=\"dark\" type=\"submit\">Submit</Button> :\r\n                    <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">No web3 provider found in your browser for this page</Tooltip>}>\r\n                        <span ref={this.wrapper} className=\"d-inline-block\">\r\n                            <Button variant=\"outline-dark\" type=\"submit\" disabled style={{ pointerEvents: 'none' }}>Submit</Button>\r\n                        </span>\r\n                    </OverlayTrigger>}\r\n            </BSForm>\r\n        );\r\n    }\r\n}","import Web3 from 'web3';\r\n\r\nexport default (function () {\r\n    // Modern dapp browsers...\r\n    if (window.ethereum) {\r\n        return setupWithDefaultProvider(window.ethereum);\r\n    }\r\n    // Legacy dapp browsers...\r\n    else if (window.web3) {\r\n        return setupWithDefaultProvider(window.web3.currentProvider);\r\n    }\r\n    // Non-dapp browsers...\r\n    else {\r\n        return setupWithHttpProvider()\r\n    }\r\n})();\r\n\r\nfunction setupWithDefaultProvider(provider) {\r\n    return new Web3(provider);\r\n}\r\n\r\nfunction setupWithHttpProvider() {\r\n    return new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_WEB3_API_ADDRESS));\r\n}","import web3 from './../utils/web3/web3.js';\r\n\r\nconst address = process.env.REACT_APP_CHAT_CONTRACT_ADDRESS;\r\n\r\nconst abi = [{ \"constant\": false, \"inputs\": [{ \"name\": \"message\", \"type\": \"string\" }, { \"name\": \"_alias\", \"type\": \"string\" }], \"name\": \"post\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"\", \"type\": \"uint256\" }], \"name\": \"messages\", \"outputs\": [{ \"name\": \"message\", \"type\": \"string\" }, { \"name\": \"sender\", \"type\": \"address\" }, { \"name\": \"senderAlias\", \"type\": \"string\" }, { \"name\": \"timestamp\", \"type\": \"uint256\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"getTotalMessages\", \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\nexport default new web3.eth.Contract(abi, address);","import contract from './../../contracts/Chat.js';\r\nimport BaseService from './../BaseService/BaseService.js';\r\n\r\nexport default class ChatService extends BaseService{\r\n    postMessage(message, alias) {\r\n        return new Promise((resolve, reject) => {\r\n            this.getAccount()\r\n                .then((account) => {\r\n                    contract.methods\r\n                        .post(message, alias)\r\n                        .send({\r\n                            from: account,\r\n                        })\r\n                        .then(resolve)\r\n                        .catch(reject);\r\n                })\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    getTotalMessages() {\r\n        return contract.methods\r\n            .getTotalMessages()\r\n            .call();\r\n    }\r\n\r\n    getMessage(index) {\r\n        return contract.methods\r\n            .messages(index)\r\n            .call();\r\n    }\r\n}","import web3 from './../../utils/web3/web3.js';\r\n\r\nexport default class BaseService {\r\n    getAccount() {\r\n        return new Promise((resolve, reject) => {\r\n            if (window.ethereum) {\r\n                window.ethereum.enable()\r\n                    .then(() => {\r\n                        web3.eth.getAccounts()\r\n                            .then((accounts) => resolve(accounts[0]))\r\n                            .catch(reject);\r\n                    })\r\n                    .catch(reject);\r\n            }\r\n            else {\r\n                web3.eth.getAccounts()\r\n                    .then((accounts) => resolve(accounts[0]))\r\n                    .catch(reject);\r\n            }\r\n        });\r\n    }\r\n}","import React from 'react';\r\nimport './Toast.css';\r\nimport BSToast from 'react-bootstrap/Toast';\r\n\r\nexport default class Toast extends React.Component {\r\n    render() {\r\n        return (\r\n            <BSToast className={`${this.props.bgColor} ${this.props.textColor}`} delay={this.props.delay} onClose={this.props.onClose} autohide={this.props.autohide}>\r\n                <BSToast.Header className=\"bg-dark text-white\">\r\n                    <strong className=\"mr-auto\">{this.props.title}</strong>\r\n                </BSToast.Header>\r\n                <BSToast.Body>{this.props.children}</BSToast.Body>\r\n            </BSToast>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './ErrorToast.css';\r\nimport Toast from './../Toast.js';\r\n\r\nexport default class ErrorToast extends React.Component {\r\n    render() {\r\n        return (\r\n            <Toast title=\"Error\" bgColor=\"bg-danger\" textColor=\"text-white\" delay={this.props.delay} onClose={this.props.onClose} autohide={this.props.autohide}>\r\n                <div>{this.props.message}</div>\r\n            </Toast>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './InfoToast.css';\r\nimport Toast from './../Toast.js';\r\n\r\nexport default class InfoToast extends React.Component {\r\n    render() {\r\n        return (\r\n            <Toast title=\"Info\" bgColor=\"bg-info\" textColor=\"text-white\" delay={this.props.delay} onClose={this.props.onClose} autohide={this.props.autohide}>\r\n                <div>{this.props.message}</div>\r\n            </Toast>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './SuccessToast.css';\r\nimport Toast from './../Toast.js';\r\n\r\nexport default class SuccessToast extends React.Component {\r\n    render() {\r\n        return (\r\n            <Toast title=\"Success\" bgColor=\"bg-success\" textColor=\"text-white\" delay={this.props.delay} onClose={this.props.onClose} autohide={this.props.autohide}>\r\n                <div>{this.props.message}</div>\r\n            </Toast>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Notification.css';\r\nimport ErrorToast from './../Toast/ErrorToast/ErrorToast.js';\r\nimport InfoToast from './../Toast/InfoToast/InfoToast.js';\r\nimport SuccessToast from './../Toast/SuccessToast/SuccessToast.js';\r\n\r\nexport default class Notification extends React.Component {\r\n    render() {\r\n        const mapToToastComponent = (notification) => {\r\n            const props = {\r\n                key: notification.key,\r\n                message: notification.message,\r\n                delay: notification.delay,\r\n                autohide: notification.delay > 0,\r\n                onClose: () => this.props.onHideNotification(notification.key)\r\n            };\r\n\r\n            switch (notification.type) {\r\n                case \"Error\":\r\n                    return <ErrorToast {...props}/>;\r\n                case \"Info\":\r\n                    return <InfoToast {...props} />;\r\n                case \"Success\":\r\n                    return <SuccessToast {...props} />;\r\n                default:\r\n                    throw new Error(\"Invalid Notification Type\");\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div style={{ position: 'fixed', top: 50, right: 0 }}>\r\n                {this.props.notifications.map(mapToToastComponent)}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Notification from './../components/Notification/Notification.js';\r\n\r\nconst AppContext = React.createContext();\r\n\r\nexport class AppContextProvider extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            notifications: []\r\n        };\r\n\r\n        this.notificationCount = 0;\r\n    }\r\n\r\n    onShowNotification = (type, message, delay) => {\r\n        this.state.notifications.push({ key: ++this.notificationCount, type, message, delay });\r\n        this.setState({\r\n            notifications: this.state.notifications\r\n        });\r\n    }\r\n\r\n    onHideNotification = (key) => {\r\n        this.setState({\r\n            notifications: this.state.notifications.filter(x => x.key !== key)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const contextValue = {\r\n            notification: {\r\n                error: (message, delay) => { this.onShowNotification(\"Error\", message, delay) },\r\n                info: (message, delay) => { this.onShowNotification(\"Info\", message, delay) },\r\n                success: (message, delay) => { this.onShowNotification(\"Success\", message, delay) },\r\n            }\r\n        };\r\n\r\n        return (\r\n            <AppContext.Provider value={contextValue}>\r\n                {this.props.children}\r\n                <Notification notifications={this.state.notifications} onHideNotification={this.onHideNotification} />\r\n            </AppContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppContext;\r\n","import React from 'react';\r\nimport './Chat.css';\r\nimport Comment from './../Comment/Comment';\r\nimport Form from './../Form/Form';\r\nimport ChatService from './../../services/ChatService/ChatService.js';\r\nimport AppContext from './../../context/AppContext.js';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nclass Chat extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            comments: [],\r\n            canSubmit: false,\r\n        };\r\n\r\n        this.service = new ChatService();\r\n    }\r\n\r\n    postComment = (comment) => {\r\n        this.context.notification.info(\r\n            <div><Spinner size=\"sm\" animation=\"border\" variant=\"dark\" /><span style={{ marginLeft: \"10px\" }}>Posting new comment...</span></div>\r\n            , 5000);\r\n\r\n        this.service.postMessage(comment.message, comment.alias)\r\n            .then(() => {\r\n                this.context.notification.success(\"Comment posted with success!\", 3000);\r\n                this.fetchNewComments();\r\n            })\r\n            .catch(() => {\r\n                this.context.notification.error(\"Error posting new comment\", 3000);\r\n            });\r\n    }\r\n\r\n    loadComment = (id) => {\r\n        this.service.getMessage(id)\r\n            .then((msg) => {\r\n                this.setState((state, props) => {\r\n                    if (state.comments.some((x) => x.id === id))\r\n                        return {};\r\n\r\n                    let comments = [{\r\n                        id: id,\r\n                        alias: msg.senderAlias,\r\n                        text: msg.message,\r\n                        date: new Date(1000 * parseInt(msg.timestamp)),\r\n                        address: msg.sender,\r\n                    }, ...state.comments].sort((a, b) => b.id - a.id);\r\n                    return {\r\n                        comments\r\n                    };\r\n                });\r\n            });\r\n    }\r\n\r\n    fetchNewComments = () => {\r\n        this.service.getTotalMessages()\r\n            .then((total) => {\r\n                total = parseInt(total);\r\n                for (let i = 0; i < total; i++) {\r\n                    if (!this.state.comments.some((x) => x.id === i)) {\r\n                        this.loadComment(i);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            canSubmit: window.ethereum || window.web3\r\n        });\r\n\r\n        this.fetchNewCommentsTaskId = window.setInterval(this.fetchNewComments, 30000);\r\n        this.fetchNewComments();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.clearInterval(this.fetchNewCommentsTaskId);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CardColumns>\r\n                    <Card border=\"white\"  className=\"card\">\r\n                        <Card.Body>\r\n                            <Form postComment={this.postComment} canSubmit={this.state.canSubmit} />\r\n                        </Card.Body>\r\n                    </Card>\r\n                    {\r\n                        this.state.comments.length > 0 && this.state.comments.map((x) =>\r\n                            <Card key={x.id} border=\"white\" className=\"card\">\r\n                                <Card.Body>\r\n                                    <Comment {...x} />\r\n                                </Card.Body>\r\n                            </Card>\r\n                        )\r\n                    }\r\n                </CardColumns>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nChat.contextType = AppContext;\r\n\r\nexport default Chat;","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Chat from './../Chat/Chat';\r\nimport { AppContextProvider } from './../../context/AppContext.js';\r\n\r\nfunction App() {\r\n  return (\r\n      <>\r\n          <Navbar bg=\"dark\" variant=\"dark\">\r\n              <Navbar.Brand>Decentralized Global Chat</Navbar.Brand>\r\n          </Navbar>\r\n          \r\n          <Container fluid>\r\n              <AppContextProvider>\r\n                  <Row>\r\n                      <Col>\r\n                          <Chat />\r\n                      </Col>\r\n                  </Row>\r\n              </AppContextProvider>\r\n          </Container>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}